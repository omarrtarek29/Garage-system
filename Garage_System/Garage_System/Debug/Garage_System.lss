
Garage_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000a8c  00000b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800098  00800098  00000b58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f40  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105a  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00004874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fa  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eaa  00000000  00000000  0000535a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_1>
   8:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_2>
   c:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3a       	cpi	r26, 0xA3	; 163
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 03 	call	0x604	; 0x604 <main>
  8a:	0c 94 44 05 	jmp	0xa88	; 0xa88 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PIR_entry_action>:
*****************************************************************************/
void PIR_entry_action(void){
	static uint8_t flag = 0;
	
	// Do nothing if the garage is full
	if (car_counter < 10)
  92:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <car_counter>
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	48 f5       	brcc	.+82     	; 0xec <PIR_entry_action+0x5a>
	{
		/*
		When IR senses a car, it turns on the motor
		After then, when the car enters (meaning another ISR), turns the motor back off
		*/
		if (flag % 2 == 0)
  9a:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <flag.1832>
  9e:	80 fd       	sbrc	r24, 0
  a0:	0e c0       	rjmp	.+28     	; 0xbe <PIR_entry_action+0x2c>
		{
			// Delay between on and off should've been 1500 us but just did some calibration because of the MCU freq and simulation delay
			SERVO_on(PORTC_t, PIN0_t);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SERVO_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8d e6       	ldi	r24, 0x6D	; 109
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <PIR_entry_action+0x1c>
  b2:	00 00       	nop
			_delay_us(1462);
			SERVO_off(PORTC_t, PIN0_t);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SERVO_off>
  bc:	12 c0       	rjmp	.+36     	; 0xe2 <PIR_entry_action+0x50>
		}
		else{
			SERVO_on(PORTC_t, PIN0_t);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SERVO_on>
  c6:	80 ef       	ldi	r24, 0xF0	; 240
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <PIR_entry_action+0x38>
  ce:	00 00       	nop
			// Delay between on and off should've been 1000 us but just did some calibration because of the MCU freq and simulation delay
			_delay_us(962);
			SERVO_off(PORTC_t, PIN0_t);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SERVO_off>
			car_counter++;
  d8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <car_counter>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <car_counter>
		}
		
		flag++;
  e2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <flag.1832>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <flag.1832>
  ec:	08 95       	ret

000000ee <PIR_exit_action>:
*****************************************************************************/
void PIR_exit_action(void){
	static uint8_t flag = 0;
	
	// Do nothing if the garage is empty .. Do not open the slider from inside
	if (car_counter > 0)
  ee:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <car_counter>
  f2:	88 23       	and	r24, r24
  f4:	39 f1       	breq	.+78     	; 0x144 <PIR_exit_action+0x56>
	{
		/*
		When IR senses a car, it turns on the motor
		After then, when the car enters (meaning another ISR), turns the motor back off
		*/
		if (flag % 2 == 0)
  f6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
  fa:	80 fd       	sbrc	r24, 0
  fc:	0d c0       	rjmp	.+26     	; 0x118 <PIR_exit_action+0x2a>
		{
			// Delay between on and off should've been 1500 us but just did some calibration because of the MCU freq and simulation delay
			SERVO_on(PORTC_t, PIN1_t);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SERVO_on>
 106:	8c e6       	ldi	r24, 0x6C	; 108
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <PIR_exit_action+0x1c>
			_delay_us(1457);
			SERVO_off(PORTC_t, PIN1_t);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SERVO_off>
 116:	11 c0       	rjmp	.+34     	; 0x13a <PIR_exit_action+0x4c>
		}
		else{
			// Delay between on and off should've been 1000 us but just did some calibration because of the MCU freq and simulation delay
			SERVO_on(PORTC_t, PIN1_t);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <SERVO_on>
 120:	8f ee       	ldi	r24, 0xEF	; 239
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <PIR_exit_action+0x36>
			_delay_us(957);
			SERVO_off(PORTC_t, PIN1_t);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SERVO_off>
			car_counter--;
 130:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <car_counter>
 134:	81 50       	subi	r24, 0x01	; 1
 136:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <car_counter>
		}
		
		flag++;
 13a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
 144:	08 95       	ret

00000146 <APP_init>:
* Purpose      : Initialize app
* Parameters   : Void
* Return value : Void
*****************************************************************************/
void APP_init(void){
	LCD_init();
 146:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_init>
	PIR_init_exInt(INT0_t, ANY_LOGIC_CHANGE, PIR_entry_action);
 14a:	49 e4       	ldi	r20, 0x49	; 73
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PIR_init_exInt>
	PIR_init_exInt(INT1_t, ANY_LOGIC_CHANGE, PIR_exit_action);
 156:	47 e7       	ldi	r20, 0x77	; 119
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PIR_init_exInt>
	SERVO_init(PORTC_t, PIN0_t);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 f6 02 	call	0x5ec	; 0x5ec <SERVO_init>
	SERVO_init(PORTC_t, PIN1_t);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <SERVO_init>
 172:	08 95       	ret

00000174 <APP_loop>:
* Return value : Void
*****************************************************************************/
void APP_loop(void){
	while (1)
	{
		if (car_counter < 10)
 174:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <car_counter>
 178:	8a 30       	cpi	r24, 0x0A	; 10
 17a:	10 f5       	brcc	.+68     	; 0x1c0 <APP_loop+0x4c>
		{
			LCD_write_command(0x80);
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
			LCD_write_number(car_counter);
 182:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <car_counter>
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_write_number>
			LCD_write_string((uint8_t *)" cars inside.");
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_write_string>
			
			LCD_write_command(0xC0);
 198:	80 ec       	ldi	r24, 0xC0	; 192
 19a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
			LCD_write_number(10 - car_counter);
 19e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <car_counter>
 1a2:	6a e0       	ldi	r22, 0x0A	; 10
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	68 1b       	sub	r22, r24
 1a8:	71 09       	sbc	r23, r1
 1aa:	07 2e       	mov	r0, r23
 1ac:	00 0c       	add	r0, r0
 1ae:	88 0b       	sbc	r24, r24
 1b0:	99 0b       	sbc	r25, r25
 1b2:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_write_number>
			LCD_write_string((uint8_t *)" cars left!");
 1b6:	8e e6       	ldi	r24, 0x6E	; 110
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_write_string>
 1be:	da cf       	rjmp	.-76     	; 0x174 <APP_loop>
		}
		else
		{
			LCD_write_command(0x80);
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
			LCD_write_string((uint8_t *)"Garage is full.");
 1c6:	8a e7       	ldi	r24, 0x7A	; 122
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_write_string>
			
			LCD_write_command(0xC0);
 1ce:	80 ec       	ldi	r24, 0xC0	; 192
 1d0:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
			LCD_write_string((uint8_t *)"Check later!");
 1d4:	8a e8       	ldi	r24, 0x8A	; 138
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_write_string>
 1dc:	cb cf       	rjmp	.-106    	; 0x174 <APP_loop>

000001de <LCD_write_command>:
* Function Name: LCD_write_command
* Purpose      : Write command on data bits
* Parameters   : Command
* Return value : Void
*****************************************************************************/
void LCD_write_command(uint8_t command){
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
	
	RS(0);
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D7(READBIT(command,7));
 1ec:	cc 23       	and	r28, r28
 1ee:	34 f4       	brge	.+12     	; 0x1fc <LCD_write_command+0x1e>
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <LCD_write_command+0x28>
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	67 e0       	ldi	r22, 0x07	; 7
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D6(READBIT(command,6));
 206:	c6 ff       	sbrs	r28, 6
 208:	06 c0       	rjmp	.+12     	; 0x216 <LCD_write_command+0x38>
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	66 e0       	ldi	r22, 0x06	; 6
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 214:	05 c0       	rjmp	.+10     	; 0x220 <LCD_write_command+0x42>
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	66 e0       	ldi	r22, 0x06	; 6
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D5(READBIT(command,5));
 220:	c5 ff       	sbrs	r28, 5
 222:	06 c0       	rjmp	.+12     	; 0x230 <LCD_write_command+0x52>
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	65 e0       	ldi	r22, 0x05	; 5
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 22e:	05 c0       	rjmp	.+10     	; 0x23a <LCD_write_command+0x5c>
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D4(READBIT(command,4));
 23a:	c4 ff       	sbrs	r28, 4
 23c:	06 c0       	rjmp	.+12     	; 0x24a <LCD_write_command+0x6c>
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 248:	05 c0       	rjmp	.+10     	; 0x254 <LCD_write_command+0x76>
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	64 e0       	ldi	r22, 0x04	; 4
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	EN(1);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_write_command+0x84>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_write_command+0x8a>
 268:	00 00       	nop
	_delay_ms(1);
	EN(0);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 274:	89 ef       	ldi	r24, 0xF9	; 249
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_write_command+0x9a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_write_command+0xa0>
 27e:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(command,3));
 280:	c3 ff       	sbrs	r28, 3
 282:	06 c0       	rjmp	.+12     	; 0x290 <LCD_write_command+0xb2>
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	67 e0       	ldi	r22, 0x07	; 7
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 28e:	05 c0       	rjmp	.+10     	; 0x29a <LCD_write_command+0xbc>
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D6(READBIT(command,2));
 29a:	c2 ff       	sbrs	r28, 2
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <LCD_write_command+0xcc>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	66 e0       	ldi	r22, 0x06	; 6
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <LCD_write_command+0xd6>
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	66 e0       	ldi	r22, 0x06	; 6
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D5(READBIT(command,1));
 2b4:	c1 ff       	sbrs	r28, 1
 2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <LCD_write_command+0xe6>
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <LCD_write_command+0xf0>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D4(READBIT(command,0));
 2ce:	c0 ff       	sbrs	r28, 0
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <LCD_write_command+0x100>
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <LCD_write_command+0x10a>
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	EN(1);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 2f2:	89 ef       	ldi	r24, 0xF9	; 249
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_write_command+0x118>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_write_command+0x11e>
 2fc:	00 00       	nop
	_delay_ms(1);
	EN(0);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 308:	89 ef       	ldi	r24, 0xF9	; 249
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_write_command+0x12e>
 310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_write_command+0x134>
 312:	00 00       	nop
	_delay_ms(1);
}
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <LCD_init>:
	/*
	* Setting D2 to D7 --> D2 ----> RS
	*					   D3 ----> EN
	*					   D4-D7 -> Data
	*/
	DIO_init_pin(PORTB_t, PIN0_t, OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN1_t, OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN4_t, OUTPUT);
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	64 e0       	ldi	r22, 0x04	; 4
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN5_t, OUTPUT);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN6_t, OUTPUT);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	66 e0       	ldi	r22, 0x06	; 6
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
	DIO_init_pin(PORTB_t, PIN7_t, OUTPUT);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
	
	LCD_write_command(0x3);
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
 35a:	87 ee       	ldi	r24, 0xE7	; 231
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_init+0x46>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_init+0x4c>
 364:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
 36c:	87 ee       	ldi	r24, 0xE7	; 231
 36e:	93 e0       	ldi	r25, 0x03	; 3
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_init+0x58>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_init+0x5e>
 376:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
 37e:	87 ee       	ldi	r24, 0xE7	; 231
 380:	93 e0       	ldi	r25, 0x03	; 3
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_init+0x6a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_init+0x70>
 388:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
	LCD_write_command(0x28);
 390:	88 e2       	ldi	r24, 0x28	; 40
 392:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
	LCD_write_command(0x08);
 396:	88 e0       	ldi	r24, 0x08	; 8
 398:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
	LCD_write_command(0x01);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
	LCD_write_command(0x06);
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
	LCD_write_command(0x0C);
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_write_command>
 3ae:	87 e8       	ldi	r24, 0x87	; 135
 3b0:	93 e1       	ldi	r25, 0x13	; 19
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_init+0x9a>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_init+0xa0>
 3b8:	00 00       	nop
 3ba:	08 95       	ret

000003bc <LCD_write_data>:
* Function Name: LCD_write_data
* Purpose      : Write data on data bits
* Parameters   : Data
* Return value : Void
*****************************************************************************/
void LCD_write_data(uint8_t data){
 3bc:	cf 93       	push	r28
 3be:	c8 2f       	mov	r28, r24
	
	RS(1);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D7(READBIT(data,7));
 3ca:	cc 23       	and	r28, r28
 3cc:	34 f4       	brge	.+12     	; 0x3da <LCD_write_data+0x1e>
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	67 e0       	ldi	r22, 0x07	; 7
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <LCD_write_data+0x28>
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	67 e0       	ldi	r22, 0x07	; 7
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D6(READBIT(data,6));
 3e4:	c6 ff       	sbrs	r28, 6
 3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <LCD_write_data+0x38>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	66 e0       	ldi	r22, 0x06	; 6
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <LCD_write_data+0x42>
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	66 e0       	ldi	r22, 0x06	; 6
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D5(READBIT(data,5));
 3fe:	c5 ff       	sbrs	r28, 5
 400:	06 c0       	rjmp	.+12     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	65 e0       	ldi	r22, 0x05	; 5
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	65 e0       	ldi	r22, 0x05	; 5
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D4(READBIT(data,4));
 418:	c4 ff       	sbrs	r28, 4
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	64 e0       	ldi	r22, 0x04	; 4
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 426:	05 c0       	rjmp	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	64 e0       	ldi	r22, 0x04	; 4
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	EN(1);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 43c:	89 ef       	ldi	r24, 0xF9	; 249
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
	_delay_ms(1);
	EN(0);
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 452:	89 ef       	ldi	r24, 0xF9	; 249
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(data,3));
 45e:	c3 ff       	sbrs	r28, 3
 460:	06 c0       	rjmp	.+12     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	67 e0       	ldi	r22, 0x07	; 7
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 46c:	05 c0       	rjmp	.+10     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D6(READBIT(data,2));
 478:	c2 ff       	sbrs	r28, 2
 47a:	06 c0       	rjmp	.+12     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 47c:	41 e0       	ldi	r20, 0x01	; 1
 47e:	66 e0       	ldi	r22, 0x06	; 6
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 486:	05 c0       	rjmp	.+10     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	66 e0       	ldi	r22, 0x06	; 6
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D5(READBIT(data,1));
 492:	c1 ff       	sbrs	r28, 1
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	65 e0       	ldi	r22, 0x05	; 5
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	65 e0       	ldi	r22, 0x05	; 5
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	D4(READBIT(data,0));
 4ac:	c0 ff       	sbrs	r28, 0
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	64 e0       	ldi	r22, 0x04	; 4
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
	EN(1);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 4d0:	89 ef       	ldi	r24, 0xF9	; 249
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4da:	00 00       	nop
	_delay_ms(1);
	EN(0);
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 4e6:	89 ef       	ldi	r24, 0xF9	; 249
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4f0:	00 00       	nop
	_delay_ms(1);
	
}
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <LCD_write_string>:
* Function Name: LCD_write_string
* Purpose      : Write string on data bits
* Parameters   : Pointer to string
* Return value : Void
*****************************************************************************/
void LCD_write_string(uint8_t *data){
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 4fe:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0')
 500:	03 c0       	rjmp	.+6      	; 0x508 <LCD_write_string+0x12>
	{
		LCD_write_data(data[i]);
 502:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_write_data>
		i++;
 506:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : Pointer to string
* Return value : Void
*****************************************************************************/
void LCD_write_string(uint8_t *data){
	uint8_t i = 0;
	while(data[i] != '\0')
 508:	f8 01       	movw	r30, r16
 50a:	ec 0f       	add	r30, r28
 50c:	f1 1d       	adc	r31, r1
 50e:	80 81       	ld	r24, Z
 510:	81 11       	cpse	r24, r1
 512:	f7 cf       	rjmp	.-18     	; 0x502 <LCD_write_string+0xc>
	{
		LCD_write_data(data[i]);
		i++;
	}
}
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	08 95       	ret

0000051c <LCD_write_number>:


void LCD_write_number(sint32_t num){
 51c:	cf 92       	push	r12
 51e:	df 92       	push	r13
 520:	ef 92       	push	r14
 522:	ff 92       	push	r15
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	2a 97       	sbiw	r28, 0x0a	; 10
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	6b 01       	movw	r12, r22
 53c:	7c 01       	movw	r14, r24
	uint8_t num_arr[10];
	sint8_t i = 0;
	
	if (num < 0)
 53e:	99 23       	and	r25, r25
 540:	5c f4       	brge	.+22     	; 0x558 <LCD_write_number+0x3c>
	{
		LCD_write_data('-');
 542:	8d e2       	ldi	r24, 0x2D	; 45
 544:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_write_data>
		num = num * -1;
 548:	f0 94       	com	r15
 54a:	e0 94       	com	r14
 54c:	d0 94       	com	r13
 54e:	c0 94       	com	r12
 550:	c1 1c       	adc	r12, r1
 552:	d1 1c       	adc	r13, r1
 554:	e1 1c       	adc	r14, r1
 556:	f1 1c       	adc	r15, r1
	}
	
	if (num == 0)
 558:	c1 14       	cp	r12, r1
 55a:	d1 04       	cpc	r13, r1
 55c:	e1 04       	cpc	r14, r1
 55e:	f1 04       	cpc	r15, r1
 560:	e1 f4       	brne	.+56     	; 0x59a <LCD_write_number+0x7e>
	{
		LCD_write_data('0');
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_write_data>
 568:	30 c0       	rjmp	.+96     	; 0x5ca <LCD_write_number+0xae>
	// Splitting digits
	for (i = 0; num != 0; i++)
	{
		// Adding 48 to write the ASCII value of the number
		// Because LCD only write ASCII
		num_arr[i] = (num % 10) + 48;
 56a:	c7 01       	movw	r24, r14
 56c:	b6 01       	movw	r22, r12
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	0e 94 03 05 	call	0xa06	; 0xa06 <__divmodsi4>
 57a:	e1 e0       	ldi	r30, 0x01	; 1
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
 582:	e1 0f       	add	r30, r17
 584:	f1 1d       	adc	r31, r1
 586:	17 fd       	sbrc	r17, 7
 588:	fa 95       	dec	r31
 58a:	60 5d       	subi	r22, 0xD0	; 208
 58c:	60 83       	st	Z, r22
		num /= 10;
 58e:	c2 2e       	mov	r12, r18
 590:	d3 2e       	mov	r13, r19
 592:	e4 2e       	mov	r14, r20
 594:	f5 2e       	mov	r15, r21
		LCD_write_data('0');
		return;
	}
	
	// Splitting digits
	for (i = 0; num != 0; i++)
 596:	1f 5f       	subi	r17, 0xFF	; 255
 598:	01 c0       	rjmp	.+2      	; 0x59c <LCD_write_number+0x80>
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	c1 14       	cp	r12, r1
 59e:	d1 04       	cpc	r13, r1
 5a0:	e1 04       	cpc	r14, r1
 5a2:	f1 04       	cpc	r15, r1
 5a4:	11 f7       	brne	.-60     	; 0x56a <LCD_write_number+0x4e>
		// Adding 48 to write the ASCII value of the number
		// Because LCD only write ASCII
		num_arr[i] = (num % 10) + 48;
		num /= 10;
	}
	i--;
 5a6:	ff 24       	eor	r15, r15
 5a8:	fa 94       	dec	r15
 5aa:	f1 0e       	add	r15, r17
	
	while(i >= 0)
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <LCD_write_number+0xaa>
	{
		LCD_write_data(num_arr[i]);
 5ae:	e1 e0       	ldi	r30, 0x01	; 1
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	ec 0f       	add	r30, r28
 5b4:	fd 1f       	adc	r31, r29
 5b6:	ef 0d       	add	r30, r15
 5b8:	f1 1d       	adc	r31, r1
 5ba:	f7 fc       	sbrc	r15, 7
 5bc:	fa 95       	dec	r31
 5be:	80 81       	ld	r24, Z
 5c0:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_write_data>
		i--;
 5c4:	fa 94       	dec	r15
		num_arr[i] = (num % 10) + 48;
		num /= 10;
	}
	i--;
	
	while(i >= 0)
 5c6:	ff 20       	and	r15, r15
 5c8:	94 f7       	brge	.-28     	; 0x5ae <LCD_write_number+0x92>
	{
		LCD_write_data(num_arr[i]);
		i--;
	}
	
 5ca:	2a 96       	adiw	r28, 0x0a	; 10
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	ff 90       	pop	r15
 5de:	ef 90       	pop	r14
 5e0:	df 90       	pop	r13
 5e2:	cf 90       	pop	r12
 5e4:	08 95       	ret

000005e6 <PIR_init_exInt>:
* Purpose      : Initialize PIR with external interrupt pin
* Parameters   : External interrupt pin name, edge to work with and the function to ISR
* Return value : Void
*****************************************************************************/
void PIR_init_exInt(EX_INT_num_t exInt, EX_INT_edge_t edge, void(*fptr)(void)){
	EX_INTERRUPT_init(exInt, edge, fptr);
 5e6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <EX_INTERRUPT_init>
 5ea:	08 95       	ret

000005ec <SERVO_init>:
* Purpose      : Initialize Servo at a certain pin
* Parameters   : Register name and pin number of servo
* Return value : Void
*****************************************************************************/
void SERVO_init(REG_name_t reg, PIN_num_t pin){
	DIO_init_pin(reg, pin, OUTPUT);
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	0e 94 09 03 	call	0x612	; 0x612 <DIO_init_pin>
 5f2:	08 95       	ret

000005f4 <SERVO_on>:
* Purpose      : Turn Servo on
* Parameters   : Register name and pin number of servo
* Return value : Void
*****************************************************************************/
void SERVO_on(REG_name_t reg, PIN_num_t pin){
	DIO_write(reg, pin, HIGH);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 5fa:	08 95       	ret

000005fc <SERVO_off>:
* Purpose      : Turn Servo off
* Parameters   : Register name and pin number of servo
* Return value : Void
*****************************************************************************/
void SERVO_off(REG_name_t reg, PIN_num_t pin){
	DIO_write(reg, pin, LOW);
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <DIO_write>
 602:	08 95       	ret

00000604 <main>:
#include "APPLICATION/APP.h"


int main(void)
{
	APP_init();
 604:	0e 94 a3 00 	call	0x146	; 0x146 <APP_init>
    APP_loop();
 608:	0e 94 ba 00 	call	0x174	; 0x174 <APP_loop>
}
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	08 95       	ret

00000612 <DIO_init_pin>:
			case PORTC_t:
			DDRC = 0xff;
			break;
			
			case PORTD_t:
			DDRD = 0xff;
 612:	44 23       	and	r20, r20
 614:	19 f0       	breq	.+6      	; 0x61c <DIO_init_pin+0xa>
 616:	41 30       	cpi	r20, 0x01	; 1
 618:	c9 f1       	breq	.+114    	; 0x68c <DIO_init_pin+0x7a>
 61a:	08 95       	ret
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	91 f0       	breq	.+36     	; 0x644 <DIO_init_pin+0x32>
 620:	28 f0       	brcs	.+10     	; 0x62c <DIO_init_pin+0x1a>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	d9 f0       	breq	.+54     	; 0x65c <DIO_init_pin+0x4a>
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	29 f1       	breq	.+74     	; 0x674 <DIO_init_pin+0x62>
 62a:	08 95       	ret
 62c:	2a b3       	in	r18, 0x1a	; 26
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_init_pin+0x26>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_init_pin+0x22>
 63c:	80 95       	com	r24
 63e:	82 23       	and	r24, r18
 640:	8a bb       	out	0x1a, r24	; 26
 642:	08 95       	ret
 644:	27 b3       	in	r18, 0x17	; 23
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_init_pin+0x3e>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_init_pin+0x3a>
 654:	80 95       	com	r24
 656:	82 23       	and	r24, r18
 658:	87 bb       	out	0x17, r24	; 23
 65a:	08 95       	ret
 65c:	24 b3       	in	r18, 0x14	; 20
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_init_pin+0x56>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_init_pin+0x52>
 66c:	80 95       	com	r24
 66e:	82 23       	and	r24, r18
 670:	84 bb       	out	0x14, r24	; 20
 672:	08 95       	ret
 674:	21 b3       	in	r18, 0x11	; 17
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_init_pin+0x6e>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	6a 95       	dec	r22
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_init_pin+0x6a>
 684:	80 95       	com	r24
 686:	82 23       	and	r24, r18
 688:	81 bb       	out	0x11, r24	; 17
 68a:	08 95       	ret
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	89 f0       	breq	.+34     	; 0x6b2 <DIO_init_pin+0xa0>
 690:	28 f0       	brcs	.+10     	; 0x69c <DIO_init_pin+0x8a>
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	c9 f0       	breq	.+50     	; 0x6c8 <DIO_init_pin+0xb6>
 696:	83 30       	cpi	r24, 0x03	; 3
 698:	11 f1       	breq	.+68     	; 0x6de <DIO_init_pin+0xcc>
 69a:	08 95       	ret
 69c:	2a b3       	in	r18, 0x1a	; 26
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_init_pin+0x96>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_init_pin+0x92>
 6ac:	82 2b       	or	r24, r18
 6ae:	8a bb       	out	0x1a, r24	; 26
 6b0:	08 95       	ret
 6b2:	27 b3       	in	r18, 0x17	; 23
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_init_pin+0xac>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_init_pin+0xa8>
 6c2:	82 2b       	or	r24, r18
 6c4:	87 bb       	out	0x17, r24	; 23
 6c6:	08 95       	ret
 6c8:	24 b3       	in	r18, 0x14	; 20
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_init_pin+0xc2>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	6a 95       	dec	r22
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_init_pin+0xbe>
 6d8:	82 2b       	or	r24, r18
 6da:	84 bb       	out	0x14, r24	; 20
 6dc:	08 95       	ret
 6de:	21 b3       	in	r18, 0x11	; 17
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_init_pin+0xd8>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_init_pin+0xd4>
 6ee:	82 2b       	or	r24, r18
 6f0:	81 bb       	out	0x11, r24	; 17
 6f2:	08 95       	ret

000006f4 <DIO_write>:
* Purpose      : Write on a specific pin in a specific port whether low or high
* Parameters   : Register name, pin number and the value to be written
* Return value : Void
*****************************************************************************/
void DIO_write(REG_name_t reg, PIN_num_t pin, PIN_value_t value){
	switch (value)
 6f4:	44 23       	and	r20, r20
 6f6:	19 f0       	breq	.+6      	; 0x6fe <DIO_write+0xa>
 6f8:	41 30       	cpi	r20, 0x01	; 1
 6fa:	c9 f1       	breq	.+114    	; 0x76e <DIO_write+0x7a>
 6fc:	08 95       	ret
	{
		case LOW:
		switch (reg)
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	91 f0       	breq	.+36     	; 0x726 <DIO_write+0x32>
 702:	28 f0       	brcs	.+10     	; 0x70e <DIO_write+0x1a>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	d9 f0       	breq	.+54     	; 0x73e <DIO_write+0x4a>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	29 f1       	breq	.+74     	; 0x756 <DIO_write+0x62>
 70c:	08 95       	ret
		{
			case PORTA_t:
			CLRBIT(PORTA,pin);
 70e:	2b b3       	in	r18, 0x1b	; 27
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_write+0x26>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_write+0x22>
 71e:	80 95       	com	r24
 720:	82 23       	and	r24, r18
 722:	8b bb       	out	0x1b, r24	; 27
			break;
 724:	08 95       	ret
			
			case PORTB_t:
			CLRBIT(PORTB,pin);
 726:	28 b3       	in	r18, 0x18	; 24
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_write+0x3e>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	6a 95       	dec	r22
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_write+0x3a>
 736:	80 95       	com	r24
 738:	82 23       	and	r24, r18
 73a:	88 bb       	out	0x18, r24	; 24
			break;
 73c:	08 95       	ret
			
			case PORTC_t:
			CLRBIT(PORTC,pin);
 73e:	25 b3       	in	r18, 0x15	; 21
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_write+0x56>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_write+0x52>
 74e:	80 95       	com	r24
 750:	82 23       	and	r24, r18
 752:	85 bb       	out	0x15, r24	; 21
			break;
 754:	08 95       	ret
			
			case PORTD_t:
			CLRBIT(PORTD,pin);
 756:	22 b3       	in	r18, 0x12	; 18
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_write+0x6e>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	6a 95       	dec	r22
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_write+0x6a>
 766:	80 95       	com	r24
 768:	82 23       	and	r24, r18
 76a:	82 bb       	out	0x12, r24	; 18
			break;
 76c:	08 95       	ret
		}
		break;
		
		case HIGH:
		switch (reg)
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	89 f0       	breq	.+34     	; 0x794 <DIO_write+0xa0>
 772:	28 f0       	brcs	.+10     	; 0x77e <DIO_write+0x8a>
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	c9 f0       	breq	.+50     	; 0x7aa <DIO_write+0xb6>
 778:	83 30       	cpi	r24, 0x03	; 3
 77a:	11 f1       	breq	.+68     	; 0x7c0 <DIO_write+0xcc>
 77c:	08 95       	ret
		{
			case PORTA_t:
			SETBIT(PORTA,pin);
 77e:	2b b3       	in	r18, 0x1b	; 27
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_write+0x96>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	6a 95       	dec	r22
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_write+0x92>
 78e:	82 2b       	or	r24, r18
 790:	8b bb       	out	0x1b, r24	; 27
			break;
 792:	08 95       	ret
			
			case PORTB_t:
			SETBIT(PORTB,pin);
 794:	28 b3       	in	r18, 0x18	; 24
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_write+0xac>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_write+0xa8>
 7a4:	82 2b       	or	r24, r18
 7a6:	88 bb       	out	0x18, r24	; 24
			break;
 7a8:	08 95       	ret
			
			case PORTC_t:
			SETBIT(PORTC,pin);
 7aa:	25 b3       	in	r18, 0x15	; 21
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_write+0xc2>
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	6a 95       	dec	r22
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_write+0xbe>
 7ba:	82 2b       	or	r24, r18
 7bc:	85 bb       	out	0x15, r24	; 21
			break;
 7be:	08 95       	ret
			
			case PORTD_t:
			SETBIT(PORTD,pin);
 7c0:	22 b3       	in	r18, 0x12	; 18
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_write+0xd8>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	6a 95       	dec	r22
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_write+0xd4>
 7d0:	82 2b       	or	r24, r18
 7d2:	82 bb       	out	0x12, r24	; 18
 7d4:	08 95       	ret

000007d6 <EX_INTERRUPT_init>:
* Purpose      : Initialize a specific external interrupt with a specific edge function
* Parameters   : Interrupt number, edge and function to be executed in ISR
* Return value : Void
*****************************************************************************/
void EX_INTERRUPT_init(EX_INT_num_t ex, EX_INT_edge_t edge, void(*fptr)(void)){
	SETBIT(SREG,GINT); // Enable global interrupt
 7d6:	9f b7       	in	r25, 0x3f	; 63
 7d8:	90 68       	ori	r25, 0x80	; 128
 7da:	9f bf       	out	0x3f, r25	; 63
	
	switch (ex)
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	81 f1       	breq	.+96     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7e0:	20 f0       	brcs	.+8      	; 0x7ea <EX_INTERRUPT_init+0x14>
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	09 f4       	brne	.+2      	; 0x7e8 <EX_INTERRUPT_init+0x12>
 7e6:	57 c0       	rjmp	.+174    	; 0x896 <__stack+0x37>
 7e8:	08 95       	ret
	{
		case INT0_t:
		SETBIT(GICR,INT0);
 7ea:	8b b7       	in	r24, 0x3b	; 59
 7ec:	80 64       	ori	r24, 0x40	; 64
 7ee:	8b bf       	out	0x3b, r24	; 59
		INT0_Fptr = fptr;
 7f0:	50 93 a0 00 	sts	0x00A0, r21	; 0x8000a0 <INT0_Fptr+0x1>
 7f4:	40 93 9f 00 	sts	0x009F, r20	; 0x80009f <INT0_Fptr>
		switch (edge)
 7f8:	61 30       	cpi	r22, 0x01	; 1
 7fa:	69 f0       	breq	.+26     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7fc:	28 f0       	brcs	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fe:	62 30       	cpi	r22, 0x02	; 2
 800:	89 f0       	breq	.+34     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 802:	63 30       	cpi	r22, 0x03	; 3
 804:	b1 f0       	breq	.+44     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 806:	08 95       	ret
		{
			case LOW_LEVEL:
			CLRBIT(MCUCR,ISC01);
 808:	85 b7       	in	r24, 0x35	; 53
 80a:	8d 7f       	andi	r24, 0xFD	; 253
 80c:	85 bf       	out	0x35, r24	; 53
			CLRBIT(MCUCR,ISC00);
 80e:	85 b7       	in	r24, 0x35	; 53
 810:	8e 7f       	andi	r24, 0xFE	; 254
 812:	85 bf       	out	0x35, r24	; 53
			break;
 814:	08 95       	ret
			
			case ANY_LOGIC_CHANGE:
			CLRBIT(MCUCR,ISC01);
 816:	85 b7       	in	r24, 0x35	; 53
 818:	8d 7f       	andi	r24, 0xFD	; 253
 81a:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR,ISC00);
 81c:	85 b7       	in	r24, 0x35	; 53
 81e:	81 60       	ori	r24, 0x01	; 1
 820:	85 bf       	out	0x35, r24	; 53
			break;
 822:	08 95       	ret
			
			case FALLING_EDGE:
			SETBIT(MCUCR,ISC01);
 824:	85 b7       	in	r24, 0x35	; 53
 826:	82 60       	ori	r24, 0x02	; 2
 828:	85 bf       	out	0x35, r24	; 53
			CLRBIT(MCUCR,ISC00);
 82a:	85 b7       	in	r24, 0x35	; 53
 82c:	8e 7f       	andi	r24, 0xFE	; 254
 82e:	85 bf       	out	0x35, r24	; 53
			break;
 830:	08 95       	ret
			
			case RISING_EDGE:
			SETBIT(MCUCR,ISC01);
 832:	85 b7       	in	r24, 0x35	; 53
 834:	82 60       	ori	r24, 0x02	; 2
 836:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR,ISC00);
 838:	85 b7       	in	r24, 0x35	; 53
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	85 bf       	out	0x35, r24	; 53
			break;
 83e:	08 95       	ret
		break;
		
		/**********************************************************************/
		
		case INT1_t:
		SETBIT(GICR,INT1);
 840:	8b b7       	in	r24, 0x3b	; 59
 842:	80 68       	ori	r24, 0x80	; 128
 844:	8b bf       	out	0x3b, r24	; 59
		INT1_Fptr = fptr;
 846:	50 93 9e 00 	sts	0x009E, r21	; 0x80009e <INT1_Fptr+0x1>
 84a:	40 93 9d 00 	sts	0x009D, r20	; 0x80009d <INT1_Fptr>
		switch (edge)
 84e:	61 30       	cpi	r22, 0x01	; 1
 850:	69 f0       	breq	.+26     	; 0x86c <__stack+0xd>
 852:	28 f0       	brcs	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 854:	62 30       	cpi	r22, 0x02	; 2
 856:	89 f0       	breq	.+34     	; 0x87a <__stack+0x1b>
 858:	63 30       	cpi	r22, 0x03	; 3
 85a:	b1 f0       	breq	.+44     	; 0x888 <__stack+0x29>
 85c:	08 95       	ret
		{
			case LOW_LEVEL:
			CLRBIT(MCUCR,ISC11);
 85e:	85 b7       	in	r24, 0x35	; 53
 860:	87 7f       	andi	r24, 0xF7	; 247
 862:	85 bf       	out	0x35, r24	; 53
			CLRBIT(MCUCR,ISC10);
 864:	85 b7       	in	r24, 0x35	; 53
 866:	8b 7f       	andi	r24, 0xFB	; 251
 868:	85 bf       	out	0x35, r24	; 53
			break;
 86a:	08 95       	ret
			
			case ANY_LOGIC_CHANGE:
			CLRBIT(MCUCR,ISC11);
 86c:	85 b7       	in	r24, 0x35	; 53
 86e:	87 7f       	andi	r24, 0xF7	; 247
 870:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR,ISC10);
 872:	85 b7       	in	r24, 0x35	; 53
 874:	84 60       	ori	r24, 0x04	; 4
 876:	85 bf       	out	0x35, r24	; 53
			break;
 878:	08 95       	ret
			
			case FALLING_EDGE:
			SETBIT(MCUCR,ISC11);
 87a:	85 b7       	in	r24, 0x35	; 53
 87c:	88 60       	ori	r24, 0x08	; 8
 87e:	85 bf       	out	0x35, r24	; 53
			CLRBIT(MCUCR,ISC10);
 880:	85 b7       	in	r24, 0x35	; 53
 882:	8b 7f       	andi	r24, 0xFB	; 251
 884:	85 bf       	out	0x35, r24	; 53
			break;
 886:	08 95       	ret
			
			case RISING_EDGE:
			SETBIT(MCUCR,ISC11);
 888:	85 b7       	in	r24, 0x35	; 53
 88a:	88 60       	ori	r24, 0x08	; 8
 88c:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR,ISC10);
 88e:	85 b7       	in	r24, 0x35	; 53
 890:	84 60       	ori	r24, 0x04	; 4
 892:	85 bf       	out	0x35, r24	; 53
			break;
 894:	08 95       	ret
		break;
		
		/**********************************************************************/
		
		case INT2_t:
		SETBIT(GICR,INT2);
 896:	8b b7       	in	r24, 0x3b	; 59
 898:	80 62       	ori	r24, 0x20	; 32
 89a:	8b bf       	out	0x3b, r24	; 59
		INT2_Fptr = fptr;
 89c:	50 93 9c 00 	sts	0x009C, r21	; 0x80009c <INT2_Fptr+0x1>
 8a0:	40 93 9b 00 	sts	0x009B, r20	; 0x80009b <INT2_Fptr>
		switch (edge)
 8a4:	62 30       	cpi	r22, 0x02	; 2
 8a6:	19 f0       	breq	.+6      	; 0x8ae <__stack+0x4f>
 8a8:	63 30       	cpi	r22, 0x03	; 3
 8aa:	29 f0       	breq	.+10     	; 0x8b6 <__stack+0x57>
 8ac:	08 95       	ret
		{
			case FALLING_EDGE:
			CLRBIT(MCUCSR,ISC2);
 8ae:	84 b7       	in	r24, 0x34	; 52
 8b0:	8f 7b       	andi	r24, 0xBF	; 191
 8b2:	84 bf       	out	0x34, r24	; 52
			break;
 8b4:	08 95       	ret
			
			case RISING_EDGE:
			SETBIT(MCUCSR,ISC2);
 8b6:	84 b7       	in	r24, 0x34	; 52
 8b8:	80 64       	ori	r24, 0x40	; 64
 8ba:	84 bf       	out	0x34, r24	; 52
 8bc:	08 95       	ret

000008be <__vector_1>:
* Function Name: ISR of INT0
* Purpose      : Call the function passed to be executed when INT0 is on
* Parameters   : INT0 isr address
* Return value : Void
*****************************************************************************/
ISR(INT0_vect){
 8be:	1f 92       	push	r1
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	0f 92       	push	r0
 8c6:	11 24       	eor	r1, r1
 8c8:	2f 93       	push	r18
 8ca:	3f 93       	push	r19
 8cc:	4f 93       	push	r20
 8ce:	5f 93       	push	r21
 8d0:	6f 93       	push	r22
 8d2:	7f 93       	push	r23
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	af 93       	push	r26
 8da:	bf 93       	push	r27
 8dc:	ef 93       	push	r30
 8de:	ff 93       	push	r31
	if (INT0_Fptr != NULLPTR)
 8e0:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <INT0_Fptr>
 8e4:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <INT0_Fptr+0x1>
 8e8:	30 97       	sbiw	r30, 0x00	; 0
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__vector_1+0x30>
	{
		INT0_Fptr();
 8ec:	09 95       	icall
	}
}
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

00000910 <__vector_2>:
* Function Name: ISR of INT1
* Purpose      : Call the function passed to be executed when INT1 is on
* Parameters   : INT1 isr address
* Return value : Void
*****************************************************************************/
ISR(INT1_vect){
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
	if (INT1_Fptr != NULLPTR)
 932:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <INT1_Fptr>
 936:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <INT1_Fptr+0x1>
 93a:	30 97       	sbiw	r30, 0x00	; 0
 93c:	09 f0       	breq	.+2      	; 0x940 <__vector_2+0x30>
	{
		INT1_Fptr();
 93e:	09 95       	icall
	}
}
 940:	ff 91       	pop	r31
 942:	ef 91       	pop	r30
 944:	bf 91       	pop	r27
 946:	af 91       	pop	r26
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	7f 91       	pop	r23
 94e:	6f 91       	pop	r22
 950:	5f 91       	pop	r21
 952:	4f 91       	pop	r20
 954:	3f 91       	pop	r19
 956:	2f 91       	pop	r18
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <__vector_3>:
* Function Name: ISR of INT2
* Purpose      : Call the function passed to be executed when INT2 is on
* Parameters   : INT2 isr address
* Return value : Void
*****************************************************************************/
ISR(INT2_vect){
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	2f 93       	push	r18
 96e:	3f 93       	push	r19
 970:	4f 93       	push	r20
 972:	5f 93       	push	r21
 974:	6f 93       	push	r22
 976:	7f 93       	push	r23
 978:	8f 93       	push	r24
 97a:	9f 93       	push	r25
 97c:	af 93       	push	r26
 97e:	bf 93       	push	r27
 980:	ef 93       	push	r30
 982:	ff 93       	push	r31
	if (INT2_Fptr != NULLPTR)
 984:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <INT2_Fptr>
 988:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <INT2_Fptr+0x1>
 98c:	30 97       	sbiw	r30, 0x00	; 0
 98e:	09 f0       	breq	.+2      	; 0x992 <__vector_3+0x30>
	{
		INT2_Fptr();
 990:	09 95       	icall
	}
 992:	ff 91       	pop	r31
 994:	ef 91       	pop	r30
 996:	bf 91       	pop	r27
 998:	af 91       	pop	r26
 99a:	9f 91       	pop	r25
 99c:	8f 91       	pop	r24
 99e:	7f 91       	pop	r23
 9a0:	6f 91       	pop	r22
 9a2:	5f 91       	pop	r21
 9a4:	4f 91       	pop	r20
 9a6:	3f 91       	pop	r19
 9a8:	2f 91       	pop	r18
 9aa:	0f 90       	pop	r0
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	0f 90       	pop	r0
 9b0:	1f 90       	pop	r1
 9b2:	18 95       	reti

000009b4 <__vector_7>:
* Function Name: ISR of Timer1 on ctc mode
* Purpose      : Generate interrupt in compare match
* Parameters   : Timer1 ctc isr address
* Return value : Void
*****************************************************************************/
ISR(TIMER1_COMPA_vect){
 9b4:	1f 92       	push	r1
 9b6:	0f 92       	push	r0
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	0f 92       	push	r0
 9bc:	11 24       	eor	r1, r1
 9be:	2f 93       	push	r18
 9c0:	3f 93       	push	r19
 9c2:	4f 93       	push	r20
 9c4:	5f 93       	push	r21
 9c6:	6f 93       	push	r22
 9c8:	7f 93       	push	r23
 9ca:	8f 93       	push	r24
 9cc:	9f 93       	push	r25
 9ce:	af 93       	push	r26
 9d0:	bf 93       	push	r27
 9d2:	ef 93       	push	r30
 9d4:	ff 93       	push	r31
	if (TIMER1_ctc_Fptr != NULLPTR)
 9d6:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <TIMER1_ctc_Fptr>
 9da:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <TIMER1_ctc_Fptr+0x1>
 9de:	30 97       	sbiw	r30, 0x00	; 0
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <__vector_7+0x30>
	{
		TIMER1_ctc_Fptr();
 9e2:	09 95       	icall
	}
 9e4:	ff 91       	pop	r31
 9e6:	ef 91       	pop	r30
 9e8:	bf 91       	pop	r27
 9ea:	af 91       	pop	r26
 9ec:	9f 91       	pop	r25
 9ee:	8f 91       	pop	r24
 9f0:	7f 91       	pop	r23
 9f2:	6f 91       	pop	r22
 9f4:	5f 91       	pop	r21
 9f6:	4f 91       	pop	r20
 9f8:	3f 91       	pop	r19
 9fa:	2f 91       	pop	r18
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__divmodsi4>:
 a06:	05 2e       	mov	r0, r21
 a08:	97 fb       	bst	r25, 7
 a0a:	1e f4       	brtc	.+6      	; 0xa12 <__divmodsi4+0xc>
 a0c:	00 94       	com	r0
 a0e:	0e 94 1a 05 	call	0xa34	; 0xa34 <__negsi2>
 a12:	57 fd       	sbrc	r21, 7
 a14:	07 d0       	rcall	.+14     	; 0xa24 <__divmodsi4_neg2>
 a16:	0e 94 22 05 	call	0xa44	; 0xa44 <__udivmodsi4>
 a1a:	07 fc       	sbrc	r0, 7
 a1c:	03 d0       	rcall	.+6      	; 0xa24 <__divmodsi4_neg2>
 a1e:	4e f4       	brtc	.+18     	; 0xa32 <__divmodsi4_exit>
 a20:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__negsi2>

00000a24 <__divmodsi4_neg2>:
 a24:	50 95       	com	r21
 a26:	40 95       	com	r20
 a28:	30 95       	com	r19
 a2a:	21 95       	neg	r18
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
 a2e:	4f 4f       	sbci	r20, 0xFF	; 255
 a30:	5f 4f       	sbci	r21, 0xFF	; 255

00000a32 <__divmodsi4_exit>:
 a32:	08 95       	ret

00000a34 <__negsi2>:
 a34:	90 95       	com	r25
 a36:	80 95       	com	r24
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	8f 4f       	sbci	r24, 0xFF	; 255
 a40:	9f 4f       	sbci	r25, 0xFF	; 255
 a42:	08 95       	ret

00000a44 <__udivmodsi4>:
 a44:	a1 e2       	ldi	r26, 0x21	; 33
 a46:	1a 2e       	mov	r1, r26
 a48:	aa 1b       	sub	r26, r26
 a4a:	bb 1b       	sub	r27, r27
 a4c:	fd 01       	movw	r30, r26
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__udivmodsi4_ep>

00000a50 <__udivmodsi4_loop>:
 a50:	aa 1f       	adc	r26, r26
 a52:	bb 1f       	adc	r27, r27
 a54:	ee 1f       	adc	r30, r30
 a56:	ff 1f       	adc	r31, r31
 a58:	a2 17       	cp	r26, r18
 a5a:	b3 07       	cpc	r27, r19
 a5c:	e4 07       	cpc	r30, r20
 a5e:	f5 07       	cpc	r31, r21
 a60:	20 f0       	brcs	.+8      	; 0xa6a <__udivmodsi4_ep>
 a62:	a2 1b       	sub	r26, r18
 a64:	b3 0b       	sbc	r27, r19
 a66:	e4 0b       	sbc	r30, r20
 a68:	f5 0b       	sbc	r31, r21

00000a6a <__udivmodsi4_ep>:
 a6a:	66 1f       	adc	r22, r22
 a6c:	77 1f       	adc	r23, r23
 a6e:	88 1f       	adc	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	1a 94       	dec	r1
 a74:	69 f7       	brne	.-38     	; 0xa50 <__udivmodsi4_loop>
 a76:	60 95       	com	r22
 a78:	70 95       	com	r23
 a7a:	80 95       	com	r24
 a7c:	90 95       	com	r25
 a7e:	9b 01       	movw	r18, r22
 a80:	ac 01       	movw	r20, r24
 a82:	bd 01       	movw	r22, r26
 a84:	cf 01       	movw	r24, r30
 a86:	08 95       	ret

00000a88 <_exit>:
 a88:	f8 94       	cli

00000a8a <__stop_program>:
 a8a:	ff cf       	rjmp	.-2      	; 0xa8a <__stop_program>
